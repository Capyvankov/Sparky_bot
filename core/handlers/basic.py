from aiogram import Bot, types
from aiogram.types import Message
from core.utils.utils_2 import get_schedule
from core.keyboards.keyboards import start
from aiogram.fsm.context import FSMContext
from core.utils.statestest import StepsForm
from core.keyboards.keyboards import keyboard_days_of_week, keyboard_yes_no
import emoji


async def cmd_start_kb(message: Message, bot:Bot):
    start,
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=start,
        resize_keyboard=True,
    )
    await message.answer (f'<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b> –Ø —Ö–æ—á—É –ø–æ–º–æ—á—å —Ç–µ–±–µ! –ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ‚ÅâüìÑ', reply_markup=keyboard, parse_mode="HTML")

async def get_schedule_form(message: Message, state: FSMContext):
    await message.answer(f'<b>{message.from_user.first_name},</b> –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏üóì:',
                         reply_markup=keyboard_days_of_week)
    await state.set_state(StepsForm.GET_DAY)

async def get_day(message: Message, bot:Bot, state: FSMContext):
    await message.answer(f"<b>{message.from_user.first_name},</b> –í–≤–µ–¥–∏ <u>—Ü–∏—Ñ—Ä—É –∏ –±—É–∫–≤—É</u> –∫–ª–∞—Å—Å–∞üìã: ", parse_mode="HTML")
    await state.update_data(day=message.text)
    await state.set_state(StepsForm.GET_NUM_AND_LETTER)

async def get_num_and_letter(message: Message, state: FSMContext):
    context_data = await state.get_data()
    await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏üóì: \r\n{context_data.get('day')}\r\n"
                         f"–¢—ã –≤—ã–±—Ä–∞–ª –±—É–∫–≤—É –∏ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞üìã: \r\n{message.text}\r\n",
                         reply_markup=keyboard_yes_no)
    await state.update_data(num_and_letter=message.text)
    await state.set_state(StepsForm.GET_SCHEDULE)

async def get_schedule_from_sparky(message: Message, state: FSMContext):

    context_data = await state.get_data()
    # await message.answer(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π:\r\n{str(context_data)}')
    day_of_week = str(context_data.get('day'))
    num_and_letter = str(context_data.get('num_and_letter'))
    print(day_of_week, num_and_letter)
    #–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    list_of_lessons, list_of_rooms = get_schedule(day_of_week, num_and_letter)
    print(list_of_lessons, list_of_rooms)

    lessons_string = ''
    for lesson, room in zip(list_of_lessons, list_of_rooms):
        lessons_string += str(lesson)
        lessons_string += " –ö–ê–ë "
        lessons_string += str(room)
        lessons_string += '\n '
    print(lessons_string)

    # lessons_string = '\n'.join(map(str, list_of_lessons)) #–ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–∂–æ–∏–Ω –∏ –º–∞–ø –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤ —É–¥–æ–±–Ω—É—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫—É

    data_user = f'–í–æ—Ç —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüìá. \r\n' \
                f'–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏üóì: {day_of_week}\r\n' \
                f'–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Åüìã: {num_and_letter}\r\n' \

    await message.answer(data_user)
    await message.answer(lessons_string)

    await state.clear()

async def get_no(message:Message, state: FSMContext):
    await state.clear()
    get_schedule_form()


